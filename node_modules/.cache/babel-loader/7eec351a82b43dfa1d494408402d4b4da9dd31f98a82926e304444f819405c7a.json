{"ast":null,"code":"var _jsxFileName = \"/home/marie/Development/code/phase-2-project/phase-2-project/project/src/components/CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const addToCart = product => {\n    // Checking if the product is already in the cart\n    const existingProduct = cart.find(item => item.id === product.id);\n    if (existingProduct) {\n      // If the product is already in the cart, it updates the quantity\n      setCart(prevCart => prevCart.map(item => item.id === product.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item));\n    } else {\n      // If the product is not in the cart, it will add with a quantity of 1\n      setCart(prevCart => [...prevCart, {\n        ...product,\n        quantity: 1\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","addToCart","product","existingProduct","find","item","id","prevCart","map","quantity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/marie/Development/code/phase-2-project/phase-2-project/project/src/components/CartContext.js"],"sourcesContent":["\nimport React, { createContext, useState } from 'react';\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n\n  const addToCart = (product) => {\n    // Checking if the product is already in the cart\n    const existingProduct = cart.find((item) => item.id === product.id);\n\n    if (existingProduct) {\n      // If the product is already in the cart, it updates the quantity\n      setCart((prevCart) =>\n        prevCart.map((item) =>\n          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\n        )\n      );\n    } else {\n      // If the product is not in the cart, it will add with a quantity of 1\n      setCart((prevCart) => [...prevCart, { ...product, quantity: 1 }]);\n    }\n  };\n\n  return (\n    <CartContext.Provider value={{ cart, addToCart }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMS,SAAS,GAAIC,OAAO,IAAK;IAC7B;IACA,MAAMC,eAAe,GAAGJ,IAAI,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;IAEnE,IAAIH,eAAe,EAAE;MACnB;MACAH,OAAO,CAAEO,QAAQ,IACfA,QAAQ,CAACC,GAAG,CAAEH,IAAI,IAChBA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,GAAG;QAAE,GAAGD,IAAI;QAAEI,QAAQ,EAAEJ,IAAI,CAACI,QAAQ,GAAG;MAAE,CAAC,GAAGJ,IACtE,CACF,CAAC;IACH,CAAC,MAAM;MACL;MACAL,OAAO,CAAEO,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE;QAAE,GAAGL,OAAO;QAAEO,QAAQ,EAAE;MAAE,CAAC,CAAC,CAAC;IACnE;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,IAAI;MAAEE;IAAU,CAAE;IAAAJ,QAAA,EAC9CA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjB,EAAA,CAzBWF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}